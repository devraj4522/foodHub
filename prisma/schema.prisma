// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  phone     String   @unique @db.Char(10)
  email     String?  @unique
  otpCode   String?
  otpExpiresAt DateTime?
  verified  Boolean  @default(false)
  role      String   @default("customer")
  city      String?
  state     String?
  pinCode   String?  @db.Char(6)
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  reviews   Review[]
  favorites Restaurant[]
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  image       String
  description String?
  cuisine     String[]
  address     String
  city        String
  state       String
  pinCode     String   @db.Char(6)
  phone       String   @db.Char(10)
  rating      Float    @default(0)
  avgCostForTwo Float
  openingTime  String
  closingTime  String
  isActive    Boolean  @default(true)
  deliveryTime Int?    // Estimated delivery time in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  menu        MenuItem[]
  orders      Order[]
  reviews     Review[]
  favoritedBy User[]
}
model MenuItem {
  id           String     @id @default(cuid())
  name         String
  description  String?
  price        Float
  rating       Float    @default(0)
  isVegetarian Boolean    @default(false)
  isVegan      Boolean    @default(false)
  isGlutenFree Boolean    @default(false)
  spicyLevel   Int?       @default(0) // 0-5 scale
  isAvailable  Boolean    @default(true)
  image        String?    // URL to the image
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  orderItems   OrderItem[]
  category     Category   @relation(fields: [categoryId], references: [id])
  categoryId   String
}

model Category {
  id       String     @id @default(cuid())
  name     String
  description    String?
  menuItems MenuItem[]
}

model Order {
  id              String     @id @default(cuid())
  user            User       @relation(fields: [userId], references: [id])
  userId          String
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId    String
  items           OrderItem[]
  totalAmount     Float
  paymentMethod   String
  paymentStatus   String     @default("pending")
  paymentVerified Boolean    @default(false)
  orderStatus     String     @default("placed") // placed, preparing, out_for_delivery, delivered, cancelled
  deliveryAddress String
  deliveryInstructions String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
  quantity   Int
  price      Float
  specialInstructions String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Review {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  rating       Int
  comment      String?
  foodRating   Int?
  serviceRating Int?
  ambience     Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
